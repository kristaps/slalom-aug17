//Get selected service and provider data from client sessionStoragelet selectedService = JSON.parse(sessionStorage.getItem("selectedService"));let selectedProvider = JSON.parse(sessionStorage.getItem("selectedProvider"));//mockup data for dev onlyif(!selectedService) {	selectedService = {		"id": 58,		"name": "Metalcomposite crown on implant",		"price_high": "717.00",		"price_low": "350.00",		"duration": 7200	}}if(!selectedProvider) {	selectedProvider = {		"id": 3,		"name": "Rīgas Stradiņa universitātes Stomatoloģijas institūts",		"rating": 5,		"address": "SIA “RSU Stomatoloģijas institūts”, Dzirciema ielā 20",		"nearest_airport": "RIX",		"airport_transfer_time": 10800	}}// Flight search settingslet departureAirport;let destinationAirport = selectedProvider.nearest_airport;let flightDateFrom;let flightDateTo;let amountOverall;$("#flight-list-header").find('span').html(destinationAirport);let bookingSummary = $("#booking-summary");let servicePrice = +selectedService.price_low + selectedProvider.id % 10 * 50;let airportSearchOptions = {	url: function(phrase) {		return `https://private-anon-eeaec2e728-locations10.apiary-mock.com/?term=${phrase}&locale=en-US&location_types=airport&limit=20&partner=picky`;	},	getValue: function(element) {		return element.name;	},	ajaxSettings: {		dataType: "json",		method: "GET",		data: {			dataType: "json"		}	},	listLocation: "locations",	preparePostData: function(data) {		data.phrase = $("#airport-search-input").val();		return data;	},	list: {		onChooseEvent: function() {			let airport = $("#airport-search-input").getSelectedItemData();			let code = airport.code || airport.id;			departureAirport = code;			if(flightDateFrom && flightDateTo) {				getFlightsList();			}		}	},	requestDelay: 400,	theme: "square"};$("#airport-search-input").easyAutocomplete(airportSearchOptions);//Datepicker settings// Initializationlet datepickerOptions = {	language: 'en',	minDate: new Date(), // Now can select only dates, which goes after today	dateFormat: 'dd/mm/yyyy',	onSelect: function onSelect(fd, date) {		$('#departure-date').data('datepicker').hide();		flightDateFrom = fd;		let today = date;		let nextWeekDay = new Date(today.getFullYear(), today.getMonth()+1, today.getDate()+7);		flightDateTo = `${nextWeekDay.getDate()}/${nextWeekDay.getMonth()}/${nextWeekDay.getFullYear()}`;		if(departureAirport && destinationAirport) {			getFlightsList();		}	}};$('#departure-date').datepicker(datepickerOptions);// Access instance of plugin$('#departure-date').data('datepicker');//show datepicker when page opens$('#departure-date').data('datepicker').show();//Booking schedule settings$('#booking-schedule').weekly_schedule({	// Days displayed	days: ["sun", "mon", "tue", "wed", "thu", "fri", "sat"],	// Hours displayed	hours: "9:00AM-4:00PM",	// Font used in the component	fontFamily: "Roboto",	// Font colot used in the component	fontColor: "#9f9f9f",	// Font weight used in the component	fontWeight: "400",	// Font size used in the component	fontSize: "2rem",	// Background color when hovered	hoverColor: "rgba(27, 204, 142, 0.5)",	// Background color when selected	selectionColor: "#1bcc8e",	// Background color of headers	headerBackgroundColor: "transparent"});$('.schedule').on('selectionmade', function() {	console.log($('#booking-schedule').weekly_schedule("getSelectedHour"));}).on('selectionremoved', function() {});function getFlightsList() {	$('.loader').show();	let getFlightsUrl = `https://api.skypicker.com/flights?v=3&sort=price&asc=1&locale=us&daysInDestinationFrom=&daysInDestinationTo=&affilid=picky&children=0&infants=0&flyFrom=${departureAirport}&to=${destinationAirport}&featureName=results&dateFrom=${flightDateFrom}&dateTo=${flightDateTo}&typeFlight=oneway&returnFrom=&returnTo=&one_per_date=0&oneforcity=0&wait_for_refresh=0&adults=1&limit=60&offset=0&curr=EUR`;	$.get( getFlightsUrl, function() {})		.done(function(response) {			createFlightList(response.data);			$('.loader').hide();		})		.fail(function() {			alert( "error getting flights list" );		})}function createFlightList(data) {	let flightList = $('#flight-list');	flightList.empty();	$("#flight-list-header").show();	$.each(data, (index, flight) => {		let departureDate = new Date(flight.dTime * 1000).toDateString();		let arrivalDate = new Date(flight.aTime * 1000).toDateString();		let flightPrice = flight.conversion.EUR;		let departurePoint = `${flight.cityFrom} (${flight.flyFrom})`;		let arrivalPoint = `${flight.cityTo} (${flight.flyTo})`;		let flightTime = flight.fly_duration;		//create empty flight item		let newItem = $(`<div flight-info-wrap flex flex-column>      <div flight-row flight-info-top flex flex-space-between>        <div departure-date>Departure: <span>${departureDate}</span></div>        <div flight-price>Price for flight: <span price-span> &#8364; ${flightPrice}</span></div>      </div>      <div flight-row flight-info-middle flex flex-space-between>        <div departure-point>${departurePoint}</div>        <div id="flight-time">${flightTime}</div>        <div arrival-point>${arrivalPoint}</div>      </div>      <button data-price=${flightPrice} class="button">Show appointment schedule</button>    </div>`);	newItem.find('button').click((event) => {		let serviceInfo = $("#service-info");		//@todo replace temporary algorithm for service price with real one		serviceInfo.find('#service-name').html(selectedService.name);		serviceInfo.find('#service-price').html(`&#8364; ${servicePrice}`);		amountOverall= servicePrice + +event.target.dataset.price;		sessionStorage.setItem('amount', amountOverall);		bookingSummary.find('#amount-overall span').html(amountOverall);		serviceInfo.show();		$('html, body').animate({			scrollTop: serviceInfo.offset().top		}, 500);	});	$("#flight-list").append(newItem);});}